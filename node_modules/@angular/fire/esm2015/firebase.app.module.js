/**
 * @fileoverview added by tsickle
 * Generated from: firebase.app.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, InjectionToken, isDevMode, NgModule, NgZone, Optional, PLATFORM_ID, VERSION as NG_VERSION, Version } from '@angular/core';
import firebase from 'firebase/app';
/**
 * @record
 */
import * as ɵngcc0 from '@angular/core';
export function FirebaseOptions() { }
/**
 * @record
 */
export function FirebaseAppConfig() { }
/** @type {?} */
export const FIREBASE_OPTIONS = new InjectionToken('angularfire2.app.options');
/** @type {?} */
export const FIREBASE_APP_NAME = new InjectionToken('angularfire2.app.nameOrConfig');
// Have to implement as we need to return a class from the provider, we should consider exporting
// this in the firebase/app types as this is our highest risk of breaks
export class FirebaseApp {
}
if (false) {
    /** @type {?} */
    FirebaseApp.prototype.name;
    /** @type {?} */
    FirebaseApp.prototype.options;
    /** @type {?} */
    FirebaseApp.prototype.analytics;
    /** @type {?} */
    FirebaseApp.prototype.auth;
    /** @type {?} */
    FirebaseApp.prototype.database;
    /** @type {?} */
    FirebaseApp.prototype.messaging;
    /** @type {?} */
    FirebaseApp.prototype.performance;
    /** @type {?} */
    FirebaseApp.prototype.storage;
    /** @type {?} */
    FirebaseApp.prototype.delete;
    /** @type {?} */
    FirebaseApp.prototype.firestore;
    /** @type {?} */
    FirebaseApp.prototype.functions;
    /** @type {?} */
    FirebaseApp.prototype.remoteConfig;
}
/** @type {?} */
export const VERSION = new Version('6.1.0');
/**
 * @param {?} options
 * @param {?} zone
 * @param {?=} nameOrConfig
 * @return {?}
 */
export function ɵfirebaseAppFactory(options, zone, nameOrConfig) {
    /** @type {?} */
    const name = typeof nameOrConfig === 'string' && nameOrConfig || '[DEFAULT]';
    /** @type {?} */
    const config = typeof nameOrConfig === 'object' && nameOrConfig || {};
    config.name = config.name || name;
    // Added any due to some inconsistency between @firebase/app and firebase types
    /** @type {?} */
    const existingApp = (/** @type {?} */ (firebase.apps.filter((/**
     * @param {?} app
     * @return {?}
     */
    app => app && app.name === config.name))[0]));
    // We support FirebaseConfig, initializeApp's public type only accepts string; need to cast as any
    // Could be solved with https://github.com/firebase/firebase-js-sdk/pull/1206
    /** @type {?} */
    const app = (/** @type {?} */ ((existingApp || zone.runOutsideAngular((/**
     * @return {?}
     */
    () => firebase.initializeApp(options, (/** @type {?} */ (config))))))));
    if (JSON.stringify(options) !== JSON.stringify(app.options)) {
        /** @type {?} */
        const hmr = !!((/** @type {?} */ (module))).hot;
        log('error', `${app.toString()} already initialized with different options${hmr ? ', you may need to reload as Firebase is not HMR aware.' : '.'}`);
    }
    return app;
}
/** @type {?} */
export const ɵlogAuthEmulatorError = (/**
 * @return {?}
 */
() => {
    // TODO sort this out, https://github.com/angular/angularfire/issues/2656
    log('warn', 'You may need to import \'firebase/auth\' manually in your component rather than rely on AngularFireAuth\'s dynamic import, when using the emulator suite https://github.com/angular/angularfire/issues/2656');
});
/** @type {?} */
const log = (/**
 * @param {?} level
 * @param {...?} args
 * @return {?}
 */
(level, ...args) => {
    if (isDevMode() && typeof console !== 'undefined') {
        console[level](...args);
    }
});
const ɵ0 = log;
globalThis.ɵAngularfireInstanceCache || (globalThis.ɵAngularfireInstanceCache = new Map());
/**
 * @template T
 * @param {?} cacheKey
 * @param {?} moduleName
 * @param {?} app
 * @param {?} fn
 * @param {?} args
 * @return {?}
 */
export function ɵfetchInstance(cacheKey, moduleName, app, fn, args) {
    const [instance, ...cachedArgs] = globalThis.ɵAngularfireInstanceCache.get(cacheKey) || [];
    if (instance && args.some((/**
     * @param {?} arg
     * @param {?} i
     * @return {?}
     */
    (arg, i) => {
        /** @type {?} */
        const cachedArg = cachedArgs[i];
        if (arg && typeof arg === 'object') {
            return JSON.stringify(arg) !== JSON.stringify(cachedArg);
        }
        else {
            return arg !== cachedArg;
        }
    }))) {
        /** @type {?} */
        const hmr = !!((/** @type {?} */ (module))).hot;
        log('error', `${moduleName} was already initialized on the ${app.name} Firebase App instance with different settings.${hmr ? ' You may need to reload as Firebase is not HMR aware.' : ''}`);
        return instance;
    }
    else {
        /** @type {?} */
        const newInstance = fn();
        globalThis.ɵAngularfireInstanceCache.set(cacheKey, [newInstance, ...args]);
        return newInstance;
    }
}
/** @type {?} */
const FIREBASE_APP_PROVIDER = {
    provide: FirebaseApp,
    useFactory: ɵfirebaseAppFactory,
    deps: [
        FIREBASE_OPTIONS,
        NgZone,
        [new Optional(), FIREBASE_APP_NAME]
    ]
};
export class AngularFireModule {
    // tslint:disable-next-line:ban-types
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        firebase.registerVersion('angularfire', VERSION.full, platformId.toString());
        firebase.registerVersion('angular', NG_VERSION.full);
    }
    /**
     * @param {?} options
     * @param {?=} nameOrConfig
     * @return {?}
     */
    static initializeApp(options, nameOrConfig) {
        return {
            ngModule: AngularFireModule,
            providers: [
                { provide: FIREBASE_OPTIONS, useValue: options },
                { provide: FIREBASE_APP_NAME, useValue: nameOrConfig }
            ]
        };
    }
}
AngularFireModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AngularFireModule });
AngularFireModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AngularFireModule_Factory(t) { return new (t || AngularFireModule)(ɵngcc0.ɵɵinject(PLATFORM_ID)); }, providers: [FIREBASE_APP_PROVIDER] });
/** @nocollapse */
AngularFireModule.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularFireModule, [{
        type: NgModule,
        args: [{
                providers: [FIREBASE_APP_PROVIDER]
            }]
    }], function () { return [{ type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, null); })();
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlyZWJhc2UuYXBwLm1vZHVsZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vd29ya3NwYWNlL3NyYy9jb3JlL2ZpcmViYXNlLmFwcC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQ0wsTUFBTSxFQUFFLGNBQWMsRUFBRSxTQUFTLEVBQXVCLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxPQUFPLElBQUksVUFBVSxFQUFFLE9BQU8sRUFDaEksTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxRQUFRLE1BQU0sY0FBYyxDQUFDO0FBQ3BDO0FBQ0c7QUFBVzs7QUFDZCxxQ0FFQztBQUNEO0FBQ0c7QUFBVztBQUFkLHVDQUVDO0FBQ0Q7QUFDQSxNQUFNLE9BQU8sZ0JBQWdCLEdBQUcsSUFBSSxjQUFjLENBQWtCLDBCQUEwQixDQUFDO0FBQy9GO0FBQUEsTUFBTSxPQUFPLGlCQUFpQixHQUFHLElBQUksY0FBYyxDQUF5QywrQkFBK0IsQ0FBQztBQUM1SDtBQUNpRztBQUVqRyxNQUFNLE9BQU8sV0FBVztBQUFHLENBYTFCO0FBQ0Q7QUFDWTtBQUFxQixJQWQvQiwyQkFBYTtBQUNmO0FBQ00sSUFESiw4QkFBWTtBQUNkO0FBQXFCLElBQW5CLGdDQUE4QztBQUNoRDtBQUFxQixJQUFuQiwyQkFBK0I7QUFDakM7QUFBcUIsSUFBbkIsK0JBQStEO0FBQ2pFO0FBQXFCLElBQW5CLGdDQUE4QztBQUNoRDtBQUFxQixJQUFuQixrQ0FBb0Q7QUFDdEQ7QUFBcUIsSUFBbkIsOEJBQThEO0FBQ2hFO0FBQXFCLElBQW5CLDZCQUE0QjtBQUM5QjtBQUFxQixJQUFuQixnQ0FBOEM7QUFDaEQ7QUFBcUIsSUFBbkIsZ0NBQTZEO0FBQy9EO0FBQXFCLElBQW5CLG1DQUF1RDtBQUN6RDtBQUNBO0FBQ0EsTUFBTSxPQUFPLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQztBQUFVO0FBQUksUUFB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V3JGLFlBQWlDLFVBQWtCO0FBQ3JELFFBQUksUUFBUSxDQUFDLGVBQWUsQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUNqRixRQUFJLFFBQVEsQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN6RCxJQUFFLENBQUM7QUFDSDtBQUNNO0FBQTBCO0FBQWdDO0FBQW1CO0FBQVEsSUFoQnpGLE1BQU0sQ0FBQyxhQUFhLENBQUMsT0FBd0IsRUFBRSxZQUF5QztBQUFJLFFBQzFGLE9BQU87QUFDWCxZQUFNLFFBQVEsRUFBRSxpQkFBaUI7QUFDakMsWUFBTSxTQUFTLEVBQUU7QUFDakIsZ0JBQVEsRUFBQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBQztBQUN0RCxnQkFBUSxFQUFDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFDO0FBQzVELGFBQU87QUFDUCxTQUFLLENBQUM7QUFDTixJQUFFLENBQUM7QUFDSDs2Q0FiQyxRQUFRLFNBQUM7Q0FDUixTQUFTLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxjQUNuQywrSkFDSTtBQUFDO0FBQW1CO0FBQ1UsWUFXWSxNQUFNLHVCQUF0QyxNQUFNLFNBQUMsV0FBVztBQUFROzs7Ozs7Ozs7a0NBQUU7QUFBQztBQUMxQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEluamVjdCwgSW5qZWN0aW9uVG9rZW4sIGlzRGV2TW9kZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUsIE5nWm9uZSwgT3B0aW9uYWwsIFBMQVRGT1JNX0lELCBWRVJTSU9OIGFzIE5HX1ZFUlNJT04sIFZlcnNpb25cbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgZmlyZWJhc2UgZnJvbSAnZmlyZWJhc2UvYXBwJztcblxuLy8gSU5WRVNUSUdBVEUgUHVibGljIHR5cGVzIGRvbid0IGV4cG9zZSBGaXJlYmFzZU9wdGlvbnMgb3IgRmlyZWJhc2VBcHBDb25maWcsIGlzIHRoaXMgdGhlIGNhc2UgYW55bG9uZ2VyP1xuZXhwb3J0IGludGVyZmFjZSBGaXJlYmFzZU9wdGlvbnMge1xuICBba2V5OiBzdHJpbmddOiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlyZWJhc2VBcHBDb25maWcge1xuICBba2V5OiBzdHJpbmddOiBhbnk7XG59XG5cbmV4cG9ydCBjb25zdCBGSVJFQkFTRV9PUFRJT05TID0gbmV3IEluamVjdGlvblRva2VuPEZpcmViYXNlT3B0aW9ucz4oJ2FuZ3VsYXJmaXJlMi5hcHAub3B0aW9ucycpO1xuZXhwb3J0IGNvbnN0IEZJUkVCQVNFX0FQUF9OQU1FID0gbmV3IEluamVjdGlvblRva2VuPHN0cmluZyB8IEZpcmViYXNlQXBwQ29uZmlnIHwgdW5kZWZpbmVkPignYW5ndWxhcmZpcmUyLmFwcC5uYW1lT3JDb25maWcnKTtcblxuLy8gSGF2ZSB0byBpbXBsZW1lbnQgYXMgd2UgbmVlZCB0byByZXR1cm4gYSBjbGFzcyBmcm9tIHRoZSBwcm92aWRlciwgd2Ugc2hvdWxkIGNvbnNpZGVyIGV4cG9ydGluZ1xuLy8gdGhpcyBpbiB0aGUgZmlyZWJhc2UvYXBwIHR5cGVzIGFzIHRoaXMgaXMgb3VyIGhpZ2hlc3QgcmlzayBvZiBicmVha3NcbmV4cG9ydCBjbGFzcyBGaXJlYmFzZUFwcCBpbXBsZW1lbnRzIFBhcnRpYWw8ZmlyZWJhc2UuYXBwLkFwcD4ge1xuICBuYW1lOiBzdHJpbmc7XG4gIG9wdGlvbnM6IHt9O1xuICBhbmFseXRpY3M6ICgpID0+IGZpcmViYXNlLmFuYWx5dGljcy5BbmFseXRpY3M7XG4gIGF1dGg6ICgpID0+IGZpcmViYXNlLmF1dGguQXV0aDtcbiAgZGF0YWJhc2U6IChkYXRhYmFzZVVSTD86IHN0cmluZykgPT4gZmlyZWJhc2UuZGF0YWJhc2UuRGF0YWJhc2U7XG4gIG1lc3NhZ2luZzogKCkgPT4gZmlyZWJhc2UubWVzc2FnaW5nLk1lc3NhZ2luZztcbiAgcGVyZm9ybWFuY2U6ICgpID0+IGZpcmViYXNlLnBlcmZvcm1hbmNlLlBlcmZvcm1hbmNlO1xuICBzdG9yYWdlOiAoc3RvcmFnZUJ1Y2tldD86IHN0cmluZykgPT4gZmlyZWJhc2Uuc3RvcmFnZS5TdG9yYWdlO1xuICBkZWxldGU6ICgpID0+IFByb21pc2U8dm9pZD47XG4gIGZpcmVzdG9yZTogKCkgPT4gZmlyZWJhc2UuZmlyZXN0b3JlLkZpcmVzdG9yZTtcbiAgZnVuY3Rpb25zOiAocmVnaW9uPzogc3RyaW5nKSA9PiBmaXJlYmFzZS5mdW5jdGlvbnMuRnVuY3Rpb25zO1xuICByZW1vdGVDb25maWc6ICgpID0+IGZpcmViYXNlLnJlbW90ZUNvbmZpZy5SZW1vdGVDb25maWc7XG59XG5cbmV4cG9ydCBjb25zdCBWRVJTSU9OID0gbmV3IFZlcnNpb24oJ0FOR1VMQVJGSVJFMl9WRVJTSU9OJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiDJtWZpcmViYXNlQXBwRmFjdG9yeShvcHRpb25zOiBGaXJlYmFzZU9wdGlvbnMsIHpvbmU6IE5nWm9uZSwgbmFtZU9yQ29uZmlnPzogc3RyaW5nIHwgRmlyZWJhc2VBcHBDb25maWcgfCBudWxsKSB7XG4gIGNvbnN0IG5hbWUgPSB0eXBlb2YgbmFtZU9yQ29uZmlnID09PSAnc3RyaW5nJyAmJiBuYW1lT3JDb25maWcgfHwgJ1tERUZBVUxUXSc7XG4gIGNvbnN0IGNvbmZpZyA9IHR5cGVvZiBuYW1lT3JDb25maWcgPT09ICdvYmplY3QnICYmIG5hbWVPckNvbmZpZyB8fCB7fTtcbiAgY29uZmlnLm5hbWUgPSBjb25maWcubmFtZSB8fCBuYW1lO1xuICAvLyBBZGRlZCBhbnkgZHVlIHRvIHNvbWUgaW5jb25zaXN0ZW5jeSBiZXR3ZWVuIEBmaXJlYmFzZS9hcHAgYW5kIGZpcmViYXNlIHR5cGVzXG4gIGNvbnN0IGV4aXN0aW5nQXBwID0gZmlyZWJhc2UuYXBwcy5maWx0ZXIoYXBwID0+IGFwcCAmJiBhcHAubmFtZSA9PT0gY29uZmlnLm5hbWUpWzBdIGFzIGFueTtcbiAgLy8gV2Ugc3VwcG9ydCBGaXJlYmFzZUNvbmZpZywgaW5pdGlhbGl6ZUFwcCdzIHB1YmxpYyB0eXBlIG9ubHkgYWNjZXB0cyBzdHJpbmc7IG5lZWQgdG8gY2FzdCBhcyBhbnlcbiAgLy8gQ291bGQgYmUgc29sdmVkIHdpdGggaHR0cHM6Ly9naXRodWIuY29tL2ZpcmViYXNlL2ZpcmViYXNlLWpzLXNkay9wdWxsLzEyMDZcbiAgY29uc3QgYXBwID0gKGV4aXN0aW5nQXBwIHx8IHpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gZmlyZWJhc2UuaW5pdGlhbGl6ZUFwcChvcHRpb25zLCBjb25maWcgYXMgYW55KSkpIGFzIEZpcmViYXNlQXBwO1xuICBpZiAoSlNPTi5zdHJpbmdpZnkob3B0aW9ucykgIT09IEpTT04uc3RyaW5naWZ5KGFwcC5vcHRpb25zKSkge1xuICAgIGNvbnN0IGhtciA9ICEhKG1vZHVsZSBhcyBhbnkpLmhvdDtcbiAgICBsb2coJ2Vycm9yJywgYCR7YXBwLnRvU3RyaW5nKCl9IGFscmVhZHkgaW5pdGlhbGl6ZWQgd2l0aCBkaWZmZXJlbnQgb3B0aW9ucyR7aG1yID8gJywgeW91IG1heSBuZWVkIHRvIHJlbG9hZCBhcyBGaXJlYmFzZSBpcyBub3QgSE1SIGF3YXJlLicgOiAnLid9YCk7XG4gIH1cbiAgcmV0dXJuIGFwcDtcbn1cblxuZXhwb3J0IGNvbnN0IMm1bG9nQXV0aEVtdWxhdG9yRXJyb3IgPSAoKSA9PiB7XG4gIC8vIFRPRE8gc29ydCB0aGlzIG91dCwgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhcmZpcmUvaXNzdWVzLzI2NTZcbiAgbG9nKCd3YXJuJywgJ1lvdSBtYXkgbmVlZCB0byBpbXBvcnQgXFwnZmlyZWJhc2UvYXV0aFxcJyBtYW51YWxseSBpbiB5b3VyIGNvbXBvbmVudCByYXRoZXIgdGhhbiByZWx5IG9uIEFuZ3VsYXJGaXJlQXV0aFxcJ3MgZHluYW1pYyBpbXBvcnQsIHdoZW4gdXNpbmcgdGhlIGVtdWxhdG9yIHN1aXRlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXJmaXJlL2lzc3Vlcy8yNjU2Jyk7XG59O1xuXG5jb25zdCBsb2cgPSAobGV2ZWw6ICdsb2cnfCdlcnJvcid8J2luZm8nfCd3YXJuJywgLi4uYXJnczogYW55KSA9PiB7XG4gIGlmIChpc0Rldk1vZGUoKSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlW2xldmVsXSguLi5hcmdzKTtcbiAgfVxufTtcblxuZ2xvYmFsVGhpcy7JtUFuZ3VsYXJmaXJlSW5zdGFuY2VDYWNoZSB8fD0gbmV3IE1hcCgpO1xuXG5leHBvcnQgZnVuY3Rpb24gybVmZXRjaEluc3RhbmNlPFQ+KGNhY2hlS2V5OiBhbnksIG1vZHVsZU5hbWU6IHN0cmluZywgYXBwOiBGaXJlYmFzZUFwcCwgZm46ICgpID0+IFQsIGFyZ3M6IGFueVtdKTogVCB7XG4gIGNvbnN0IFtpbnN0YW5jZSwgLi4uY2FjaGVkQXJnc10gPSBnbG9iYWxUaGlzLsm1QW5ndWxhcmZpcmVJbnN0YW5jZUNhY2hlLmdldChjYWNoZUtleSkgfHwgW107XG4gIGlmIChpbnN0YW5jZSAmJiBhcmdzLnNvbWUoKGFyZywgaSkgPT4ge1xuICAgIGNvbnN0IGNhY2hlZEFyZyA9IGNhY2hlZEFyZ3NbaV07XG4gICAgaWYgKGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFyZykgIT09IEpTT04uc3RyaW5naWZ5KGNhY2hlZEFyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBhcmcgIT09IGNhY2hlZEFyZztcbiAgICB9XG4gIH0pKSB7XG4gICAgY29uc3QgaG1yID0gISEobW9kdWxlIGFzIGFueSkuaG90O1xuICAgIGxvZygnZXJyb3InLCBgJHttb2R1bGVOYW1lfSB3YXMgYWxyZWFkeSBpbml0aWFsaXplZCBvbiB0aGUgJHthcHAubmFtZX0gRmlyZWJhc2UgQXBwIGluc3RhbmNlIHdpdGggZGlmZmVyZW50IHNldHRpbmdzLiR7aG1yID8gJyBZb3UgbWF5IG5lZWQgdG8gcmVsb2FkIGFzIEZpcmViYXNlIGlzIG5vdCBITVIgYXdhcmUuJyA6ICcnfWApO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBuZXdJbnN0YW5jZSA9IGZuKCk7XG4gICAgZ2xvYmFsVGhpcy7JtUFuZ3VsYXJmaXJlSW5zdGFuY2VDYWNoZS5zZXQoY2FjaGVLZXksIFtuZXdJbnN0YW5jZSwgLi4uYXJnc10pO1xuICAgIHJldHVybiBuZXdJbnN0YW5jZTtcbiAgfVxufVxuXG5jb25zdCBGSVJFQkFTRV9BUFBfUFJPVklERVIgPSB7XG4gIHByb3ZpZGU6IEZpcmViYXNlQXBwLFxuICB1c2VGYWN0b3J5OiDJtWZpcmViYXNlQXBwRmFjdG9yeSxcbiAgZGVwczogW1xuICAgIEZJUkVCQVNFX09QVElPTlMsXG4gICAgTmdab25lLFxuICAgIFtuZXcgT3B0aW9uYWwoKSwgRklSRUJBU0VfQVBQX05BTUVdXG4gIF1cbn07XG5cbkBOZ01vZHVsZSh7XG4gIHByb3ZpZGVyczogW0ZJUkVCQVNFX0FQUF9QUk9WSURFUl1cbn0pXG5leHBvcnQgY2xhc3MgQW5ndWxhckZpcmVNb2R1bGUge1xuICBzdGF0aWMgaW5pdGlhbGl6ZUFwcChvcHRpb25zOiBGaXJlYmFzZU9wdGlvbnMsIG5hbWVPckNvbmZpZz86IHN0cmluZyB8IEZpcmViYXNlQXBwQ29uZmlnKTogTW9kdWxlV2l0aFByb3ZpZGVyczxBbmd1bGFyRmlyZU1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogQW5ndWxhckZpcmVNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge3Byb3ZpZGU6IEZJUkVCQVNFX09QVElPTlMsIHVzZVZhbHVlOiBvcHRpb25zfSxcbiAgICAgICAge3Byb3ZpZGU6IEZJUkVCQVNFX0FQUF9OQU1FLCB1c2VWYWx1ZTogbmFtZU9yQ29uZmlnfVxuICAgICAgXVxuICAgIH07XG4gIH1cblxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6YmFuLXR5cGVzXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoUExBVEZPUk1fSUQpIHBsYXRmb3JtSWQ6IE9iamVjdCkge1xuICAgIGZpcmViYXNlLnJlZ2lzdGVyVmVyc2lvbignYW5ndWxhcmZpcmUnLCBWRVJTSU9OLmZ1bGwsIHBsYXRmb3JtSWQudG9TdHJpbmcoKSk7XG4gICAgZmlyZWJhc2UucmVnaXN0ZXJWZXJzaW9uKCdhbmd1bGFyJywgTkdfVkVSU0lPTi5mdWxsKTtcbiAgfVxufVxuIl19